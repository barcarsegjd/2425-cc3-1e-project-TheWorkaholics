name: Complete CI/CD, Submodules, Mermaid, and Java Swing

# This workflow runs when you push to or create a pull request against the main branch.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # This job builds and tests your Java Swing application.
  build-and-test:
    name: Build and Test Java Swing Application on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}   # The job will run on different operating systems.
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # List of OS's to test on.
    steps:
      # Step 1: Check out the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      # Step 2: Set up Java (using Java 17).
      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      # Step 3: Compile your Java files.
      - name: Compile Java Swing Application
        shell: bash
        run: |
          mkdir -p out
          # Finds and compiles all Java files inside the src folder.
          javac -d out $(find src -name "*.java")
      
      # Step 4: Run your Java application.
      - name: Run Java Swing Application (Headless if Linux)
        shell: bash
        run: |
          # If running on Linux, start Xvfb to simulate a display.
          if [ "${{ runner.os }}" == "Linux" ]; then
            echo "Starting Xvfb for headless display on Linux..."
            Xvfb :99 &
            export DISPLAY=:99
          fi
          # Replace 'PersonalExpenseTracker' with the name of your main class.
          java -cp out PersonalExpenseTracker || echo "Check if your main class name is correct"

  # This job updates any Git submodules in your repository.
  update-submodules:
    name: Update Git Submodules on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout Repository with Submodules
        uses: actions/checkout@v3
        with:
          submodules: true
      
      - name: Update Submodules
        shell: bash
        run: |
          git submodule update --init --recursive || echo "No submodules found"
          git pull --recurse-submodules || echo "No submodules found"

  # This job generates Mermaid diagrams if any exist.
  generate-mermaid:
    name: Generate Mermaid Diagrams on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Install Mermaid CLI
        shell: bash
        run: npm install -g @mermaid-js/mermaid-cli
      
      - name: Convert Mermaid Diagrams
        shell: bash
        run: |
          # Check if the diagrams folder exists.
          if [ -d diagrams ]; then
            mkdir -p diagrams-output
            # Loop through each .mmd file and convert it to a PNG.
            for file in diagrams/*.mmd; do
              echo "Converting $file..."
              mmdc -i "$file" -o "diagrams-output/$(basename "$file" .mmd).png"
            done
          else
            echo "No diagrams folder found, skipping Mermaid generation"
          fi
      
      - name: Upload Mermaid Diagrams as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mermaid-diagrams
          path: diagrams-output/

  # This job runs a custom script.
  custom-task:
    name: Run Custom Scripts on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Custom Script Execution
        shell: bash
        run: |
          echo "Running custom task on ${{ runner.os }}..."
          echo "Current Date & Time: $(date)"
